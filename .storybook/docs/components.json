{
  "timestamp": "2022-05-11T12:46:44",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.15.1",
    "typescriptVersion": "4.5.4"
  },
  "components": [
    {
      "filePath": "./src/components/atoms/mg-badge/mg-badge.tsx",
      "encapsulation": "shadow",
      "tag": "mg-badge",
      "readme": "## Design\n\n**RUX-01** : Le badge est placé toujours par-dessus ou à côté de l'élément sur lequel il porte.\n\n**RUX-02** : Le badge affiche un chiffre/nombre ou un caractère de ponctuation.\n\n![](./mg-badge/doc/img/screenshot-2.png)\n\n## Styles\n\n![](./mg-badge/doc/img/styles.png)\n",
      "docs": "**RUX-01** : Le badge est placé toujours par-dessus ou à côté de l'élément sur lequel il porte.\n\n**RUX-02** : Le badge affiche un chiffre/nombre ou un caractère de ponctuation.\n\n![](./mg-badge/doc/img/screenshot-2.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Badge label. Include short description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Define if button is using outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Badge value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define button variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-tabs": [
          "mg-badge"
        ]
      }
    },
    {
      "filePath": "./src/components/atoms/mg-button/mg-button.tsx",
      "encapsulation": "scoped",
      "tag": "mg-button",
      "readme": "## Design\n\n**RUX 01**: Un bouton d'action principale est majoritairement unique à l'écran, les autres boutons doivent être affichés en \"secondaire\", cela pour mettre en avant l'action principale.\nEx : Validation, Enregistrement\n\n**RUX 02**: Une tooltip doit être affichée au survol lorsque le bouton n'affiche qu'une icône non explicite sans libellé. La tooltip doit indiquer textuellement l'action du bouton.\n\n**RUX 03**: Un bouton qui lance un traitement potentiellement long est désactivé et affiche un loader le temps du traitement.\n\n### base\n\n![](./mg-button/doc/img/base.png)\n\n### main styles\n\n![](./mg-button/doc/img/main-styles.png)\n\n### Display buttons side by side\n\n![](./mg-button/doc/img/plusieurs-boutons.png)\n",
      "docs": "**RUX 01**: Un bouton d'action principale est majoritairement unique à l'écran, les autres boutons doivent être affichés en \"secondaire\", cela pour mettre en avant l'action principale.\nEx : Validation, Enregistrement\n\n**RUX 02**: Une tooltip doit être affichée au survol lorsque le bouton n'affiche qu'une icône non explicite sans libellé. La tooltip doit indiquer textuellement l'action du bouton.\n\n**RUX 03**: Un bouton qui lance un traitement potentiellement long est désactivé et affiche un loader le temps du traitement.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "controls",
          "type": "string",
          "mutable": false,
          "attr": "controls",
          "reflectToAttr": false,
          "docs": "Prop to set aria-controls on button element",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disableOnClick",
          "type": "boolean",
          "mutable": false,
          "attr": "disable-on-click",
          "reflectToAttr": false,
          "docs": "Option to set input disable on click, in order to prevent multi-click.\nParent component have to remove the attribute 'disabled' when the process ends.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": false,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Prop to set aria-expanded on button element",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "haspopup",
          "type": "\"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\" | boolean",
          "mutable": false,
          "attr": "haspopup",
          "reflectToAttr": false,
          "docs": "Option to set aria-haspopup\nThe aria-haspopup state informs assistive technology users that there is a popup and the type of popup it is, but provides no interactivity.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "value": "dialog",
              "type": "string"
            },
            {
              "value": "grid",
              "type": "string"
            },
            {
              "value": "listbox",
              "type": "string"
            },
            {
              "value": "menu",
              "type": "string"
            },
            {
              "value": "tree",
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-button')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "is-icon",
          "reflectToAttr": false,
          "docs": "Define if button is round.\nUsed for icon button.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "aria-label\nIn case button text is not explicit enough",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define button variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-message",
        "mg-modal",
        "mg-pagination",
        "mg-panel",
        "mg-popover"
      ],
      "dependencies": [
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-button": [
          "mg-icon"
        ],
        "mg-message": [
          "mg-button"
        ],
        "mg-modal": [
          "mg-button"
        ],
        "mg-pagination": [
          "mg-button"
        ],
        "mg-panel": [
          "mg-button"
        ],
        "mg-popover": [
          "mg-button"
        ]
      }
    },
    {
      "filePath": "./src/components/atoms/mg-character-left/mg-character-left.tsx",
      "encapsulation": "scoped",
      "tag": "mg-character-left",
      "readme": "## Design\n\n### Ordre des messages\n\nlorsque les messages sont affichés sous le champ l'ordre est le suivant :\n1. nombre de caractères restants\n2. aide à la saisie\n3. erreur\n\n### Indication du nombre de caractères restants\n\n- lorsque le focus est sur le champ de saisie, un message s'affiche en dessous. le message est : \"`<nbCar>` caractères disponibles\", `<nbCar>` étant un compteur qui se met à jour dynamiquement en fonction de la saisie.\n- lorsque le focus n'est plus sur le champ de saisie, le message disparaît.\n\n![](./mg-character-left/doc/img/nombre-caracteres-restants.png)\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characters",
          "type": "string",
          "mutable": false,
          "attr": "characters",
          "reflectToAttr": false,
          "docs": "Sets the characters to count",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Add maximum length",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "template",
          "type": "string",
          "mutable": false,
          "attr": "template",
          "reflectToAttr": false,
          "docs": "Template to display remaining characters.\nMust have {counter} inside",
          "docsTags": [],
          "default": "messages.nbCharLeft",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-input-date",
        "mg-input-numeric",
        "mg-input-password",
        "mg-input-radio",
        "mg-input-select",
        "mg-input-text",
        "mg-input-textarea",
        "mg-input-toggle"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-input-checkbox": [
          "mg-character-left"
        ],
        "mg-input-date": [
          "mg-character-left"
        ],
        "mg-input-numeric": [
          "mg-character-left"
        ],
        "mg-input-password": [
          "mg-character-left"
        ],
        "mg-input-radio": [
          "mg-character-left"
        ],
        "mg-input-select": [
          "mg-character-left"
        ],
        "mg-input-text": [
          "mg-character-left"
        ],
        "mg-input-textarea": [
          "mg-character-left"
        ],
        "mg-input-toggle": [
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-form/mg-form.tsx",
      "encapsulation": "shadow",
      "tag": "mg-form",
      "readme": "## Design\n\n![](./mg-form/doc/img/form.png)\n\n### Structure\n\n![](./mg-form/doc/img/structure.png)\n\n- zone pour message à caractère obligatoire\n- zone champs\n- zone actions (submit, cancel)\n\n## Example\n\n**Code example does not reflect all the code.**\n\nHere we have a `form-valid` event listener on the `mg-form` to define if the \"submit\" button should be enable or not.  \nThe \"Display errors\" button use the `mg-form` `displayError()` method.\n",
      "docs": "![](./mg-form/doc/img/form.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if form is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-form')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define form invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if form is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define form valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "form-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event on form validity check\nTells if form is valid or not",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/atoms/mg-icon/mg-icon.tsx",
      "encapsulation": "shadow",
      "tag": "mg-icon",
      "readme": "## Design\n\n### Standard\n\nTailles (px) :\n\n- 16x16 regular\n- 24x24 large\n- 36x36 extra-large\n\nCouleur : du texte de la page (majoritairement @color-dark)\n\n### Utilisation seul avec couleur informative\n\nL'utilisation d'un picto seul portant une couleur informative doit afficher la couleur en fond pour des raisons d'accessibilité.\n\nLes couleurs à utiliser sont des dérivées des couleurs standards, dont le luminosité est augmenté de 20%.\n\nRègle ok pour toutes sauf le bleu de info, mais les pictos info seuls sont affichés dans la couleur de la police la plupart du temps.\n\n### Nommage des fichiers\n\n- Séparateur : \"-\" (tiret 6). De base les pictos sont la version \"filled\", mais pas besoin de le préciser dans le nommage\n- Variante : \"-outline\". Si variante de picto avec un fond qui est un cercle plein > ajouter \"-circle\" ex : check-circle, check-circle-outline\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define icon size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "spin",
          "type": "boolean",
          "mutable": false,
          "attr": "spin",
          "reflectToAttr": false,
          "docs": "Make the icon spin",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define icon variant\nAdd a background to the icon based on variant color",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-button",
        "mg-input-checkbox",
        "mg-input-date",
        "mg-input-numeric",
        "mg-input-password",
        "mg-input-radio",
        "mg-input-select",
        "mg-input-text",
        "mg-input-textarea",
        "mg-input-toggle",
        "mg-message",
        "mg-modal",
        "mg-pagination",
        "mg-panel",
        "mg-popover",
        "mg-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-checkbox": [
          "mg-icon"
        ],
        "mg-input-date": [
          "mg-icon"
        ],
        "mg-input-numeric": [
          "mg-icon"
        ],
        "mg-input-password": [
          "mg-icon"
        ],
        "mg-input-radio": [
          "mg-icon"
        ],
        "mg-input-select": [
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-icon"
        ],
        "mg-input-textarea": [
          "mg-icon"
        ],
        "mg-input-toggle": [
          "mg-icon"
        ],
        "mg-message": [
          "mg-icon"
        ],
        "mg-modal": [
          "mg-icon"
        ],
        "mg-pagination": [
          "mg-icon"
        ],
        "mg-panel": [
          "mg-icon"
        ],
        "mg-popover": [
          "mg-icon"
        ],
        "mg-tabs": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-checkbox",
      "readme": "## Design\n\nNotion de valeur VRAI/FAUX.\nUniquement 2 valeurs possibles.\n\n### Style\n\nLe style de la case à cocher active est celui du navigateur.\n\n![](./mg-input-checkbox/doc/img/specs.png)\n",
      "docs": "Notion de valeur VRAI/FAUX.\nUniquement 2 valeurs possibles.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-checkbox')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputVerticalList",
          "type": "boolean",
          "mutable": false,
          "attr": "input-vertical-list",
          "reflectToAttr": false,
          "docs": "Define if inputs are display verticaly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "CheckboxValue[]",
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Component value\nIf item.value is `null`, checkbox will be indeterminate by default\nRequired",
          "docsTags": [],
          "values": [
            {
              "type": "CheckboxValue[]"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "CheckboxValue[]",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-checkbox": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-date/mg-input-date.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-date",
      "readme": "## Design\n\n**RUX** : Le comportement est celui natif du navigateur.\n\n### Style\n\nCalendrier et déclencheur: Le style est celui natif du navigateur.\n",
      "docs": "**RUX** : Le comportement est celui natif du navigateur.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-date')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "string",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Define input maximum date\nformat: yyyy-mm-dd",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "string",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Define input minimum date\nformat: yyyy-mm-dd",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-date": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-numeric/mg-input-numeric.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-numeric",
      "readme": "## Design\n\n**RG-01** : Un champ montant est un champ numérique. Par défaut il est limité à 16 caractères (virgule comprise).\n\n**RG-02** : Il n'est pas possible de saisir des caractères autre que des chiffres, \",\" ou \".\"\n\n**RG-03** : L'arrondi se fait à deux chiffres après la virgule.\n\n**RG-04** : Il est impossible de saisir plus de deux chiffres après la virgule.\n\n**RG-05** : Il est possible de préciser une unité à la suite du champ pour les entiers et les décimaux. Pour les monétaires, le symbole de la devise est positionné dans la zone de saisie, à la suite de la valeur.\n\n### Placements\n\n![](./mg-input-numeric/doc/img/placements.png)\n\n### Positionnement de l'unité\n\n![](./mg-input-numeric/doc/img/unite.png)\n\nA gérer via la mise en place du composant en utilisant un caractère \"espace\" avant le terme de l'unité\n\n## 🚨 Slot\n\nHorizontal spacing is not managed by the component, it must be defined in slot implementation.\n",
      "docs": "**RG-01** : Un champ montant est un champ numérique. Par défaut il est limité à 16 caractères (virgule comprise).\n\n**RG-02** : Il n'est pas possible de saisir des caractères autre que des chiffres, \",\" ou \".\"\n\n**RG-03** : L'arrondi se fait à deux chiffres après la virgule.\n\n**RG-04** : Il est impossible de saisir plus de deux chiffres après la virgule.\n\n**RG-05** : Il est possible de préciser une unité à la suite du champ pour les entiers et les décimaux. Pour les monétaires, le symbole de la devise est positionné dans la zone de saisie, à la suite de la valeur.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "decimalLength",
          "type": "number",
          "mutable": false,
          "attr": "decimal-length",
          "reflectToAttr": false,
          "docs": "Override decimal length\ndecimal is the number after the decimal point",
          "docsTags": [],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-numeric')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "integerLength",
          "type": "number",
          "mutable": false,
          "attr": "integer-length",
          "reflectToAttr": false,
          "docs": "Override integer length\ninteger is the number before the decimal point",
          "docsTags": [],
          "default": "13",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Minimum value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Define numeric type",
          "docsTags": [],
          "default": "types[0]",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"full\" | 16 | 2 | 4",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-numeric": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-password/mg-input-password.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-password",
      "readme": "## Design\n\nL'affichage standard des \"boules\" à la place des caractères est le standard (suivant rendu du navigateur utilisé)\n",
      "docs": "L'affichage standard des \"boules\" à la place des caractères est le standard (suivant rendu du navigateur utilisé)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-password')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"full\" | 16 | 2 | 4",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-password": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-radio/mg-input-radio.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-radio",
      "readme": "## Design\n\n- Toujours utilisé dans un groupe avec minimum 2 options\n- 1 seule option sélectionnée possible parmi toute les options du groupe\n- Le libellé est cliquable et sélectionne l'option\n- Le groupe peut être intialisé avec aucune valeur par défaut\n\n### Style\n\nLe style du bouton radio actif est celui du navigateur.\n\n![](./mg-input-radio/doc/img/specs.png)\n",
      "docs": "- Toujours utilisé dans un groupe avec minimum 2 options\n- 1 seule option sélectionnée possible parmi toute les options du groupe\n- Le libellé est cliquable et sélectionne l'option\n- Le groupe peut être intialisé avec aucune valeur par défaut",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-radio')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "inputVerticalList",
          "type": "boolean",
          "mutable": false,
          "attr": "input-vertical-list",
          "reflectToAttr": false,
          "docs": "Define if inputs are display verticaly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "RadioOption[] | string[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select\nRequired",
          "docsTags": [],
          "values": [
            {
              "type": "RadioOption[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emitted event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-radio": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-select/mg-input-select.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-select",
      "readme": "## Design\n\n**RUX-01** : Le comportement est celui natif du navigateur\n\n**RUX-02** : Le placeholder de la liste est Sélectionnez une valeur\n\n**RUI-01** : Le style et la position du chevron à droite du champ sont ceux du natif du navigateur.\nL'espacement entre le texte et le chevron est d'au moins 10px.\n",
      "docs": "**RUX-01** : Le comportement est celui natif du navigateur\n\n**RUX-02** : Le placeholder de la liste est Sélectionnez une valeur\n\n**RUI-01** : Le style et la position du chevron à droite du champ sont ceux du natif du navigateur.\nL'espacement entre le texte et le chevron est d'au moins 10px.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-select')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "SelectOption[] | string[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [],
          "values": [
            {
              "type": "SelectOption[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "default": "messages.input.select.placeholder",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderDisabled",
          "type": "boolean",
          "mutable": false,
          "attr": "placeholder-disabled",
          "reflectToAttr": false,
          "docs": "Option to disable placeholder",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholderHide",
          "type": "boolean",
          "mutable": false,
          "attr": "placeholder-hide",
          "reflectToAttr": false,
          "docs": "Option to remove placeholder",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"full\" | 16 | 2 | 4",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-pagination"
      ],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-select": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ],
        "mg-pagination": [
          "mg-input-select"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-text/mg-input-text.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-text",
      "readme": "## Design\n\n### Indication du nombre de caractères restants\n\n- lorsque le focus est sur le champ de saisie, un message s'affiche en dessous\n- le message est : \"<nbCar> caractères disponibles\", <nbCar> étant un compteur qui se met à jour dynamiquement en fonction de la saisie\n- lorsque le focus n'est plus sur le champ de saisie, le message disparaît\n\n![](./mg-input-text/doc/img/caracteres-aide-a-la-saisie.png)\n\n### Valeur\n\n- par défaut limitée 400 caractères de type alpha numérique.\n\n## Use as search input\n\nDue to [accessibility recommendation](https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input/search#les_champs_de_recherche_et_l%E2%80%99accessibilit%C3%A9), an `<input type=\"search\" />` must be used within a `<form role=\"search\" />` we recommend to use mg-input-text as in dedicated story.\n\n## 🚨 Slot\n\nHorizontal spacing is not managed by the component, it must be defined in slot implementation.\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characterLeftTemplate",
          "type": "string",
          "mutable": false,
          "attr": "character-left-template",
          "reflectToAttr": false,
          "docs": "Template to use for characters left sentence",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayCharacterLeft",
          "type": "boolean",
          "mutable": false,
          "attr": "display-character-left",
          "reflectToAttr": false,
          "docs": "Define if component should display character left",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Input icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-text')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "default": "400",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "patternErrorMessage",
          "type": "string",
          "mutable": false,
          "attr": "pattern-error-message",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "type",
          "type": "\"search\" | \"text\"",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Input type",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"full\" | 16 | 2 | 4",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        },
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Public method to play input focus",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-panel"
      ],
      "dependencies": [
        "mg-icon",
        "mg-tooltip",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-text": [
          "mg-icon",
          "mg-tooltip",
          "mg-input-title",
          "mg-character-left"
        ],
        "mg-panel": [
          "mg-input-text"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-textarea/mg-input-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-textarea",
      "readme": "## Design\n\n### Indication du nombre de caractères restants\n\n- lorsque le focus est sur le champ de saisie, un message s'affiche en dessous\n- le message est : \"<nbCar> caractères disponibles\", <nbCar> étant un compteur qui se met à jour dynamiquement en fonction de la saisie\n- lorsque le focus n'est plus sur le champ de saisie, le message disparaît\n\n### Valeur\n\n- par défaut limitée 4000 caractères de type alpha numérique.\n\n### Dimensions\n\n- la hauteur du composant est par défaut de 3 lignes de texte (cette valeur est configurable)\n- le champ est retaillable en cliquant en bas à droite de la zone de saisie\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "characterLeftTemplate",
          "type": "string",
          "mutable": false,
          "attr": "character-left-template",
          "reflectToAttr": false,
          "docs": "Template to use for characters left sentence",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "displayCharacterLeft",
          "type": "boolean",
          "mutable": false,
          "attr": "display-character-left",
          "reflectToAttr": false,
          "docs": "Define if component should display character left",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-textarea')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": true,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Define input invalid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Input max length",
          "docsTags": [],
          "default": "4000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "Define input pattern to validate",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "patternErrorMessage",
          "type": "string",
          "mutable": false,
          "attr": "pattern-error-message",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder.\nIt should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Define if input is required",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "number",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Define input pattern error message",
          "docsTags": [],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "valid",
          "type": "boolean",
          "mutable": true,
          "attr": "valid",
          "reflectToAttr": false,
          "docs": "Define input valid state",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": true,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "\"full\" | 16 | 2 | 4",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Define input width",
          "docsTags": [],
          "default": "'full'",
          "values": [
            {
              "value": "full",
              "type": "string"
            },
            {
              "value": "16",
              "type": "number"
            },
            {
              "value": "2",
              "type": "number"
            },
            {
              "value": "4",
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "displayError",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "displayError() => Promise<void>",
          "parameters": [],
          "docs": "Public method to display errors",
          "docsTags": [
            {
              "name": "returns"
            }
          ]
        }
      ],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-textarea": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/atoms/mg-input-title/mg-input-title.tsx",
      "encapsulation": "scoped",
      "tag": "mg-input-title",
      "readme": "## Design\n\n### Libellé\n\n- le libellé peut être positionné à gauche ou au dessus du champ de saisie.\n- l'alignement du texte est à droite.\n- le libellé peut être sur une ou plusieurs lignes.\n\n### Label on top\n\n![](./mg-input-title/doc/img/espacements-label-top.png)\n\n ### Polices\n\n![](./mg-input-title/doc/img/polices.png)\n\n### Styles / states\n\n![](./mg-input-title/doc/img/styles.png)\n\n### Formulaire\n\n#### Espacements\n\n![](./mg-input-title/doc/img/form-espacements.png)\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Label input id",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "isLegend",
          "type": "boolean",
          "mutable": false,
          "attr": "is-legend",
          "reflectToAttr": false,
          "docs": "Switch from label to fieldset sementic",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "If input is required an asterisk is added at the end of the label",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-input-date",
        "mg-input-numeric",
        "mg-input-password",
        "mg-input-radio",
        "mg-input-select",
        "mg-input-text",
        "mg-input-textarea",
        "mg-input-toggle"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-input-checkbox": [
          "mg-input-title"
        ],
        "mg-input-date": [
          "mg-input-title"
        ],
        "mg-input-numeric": [
          "mg-input-title"
        ],
        "mg-input-password": [
          "mg-input-title"
        ],
        "mg-input-radio": [
          "mg-input-title"
        ],
        "mg-input-select": [
          "mg-input-title"
        ],
        "mg-input-text": [
          "mg-input-title"
        ],
        "mg-input-textarea": [
          "mg-input-title"
        ],
        "mg-input-toggle": [
          "mg-input-title"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/inputs/mg-input-toggle/mg-input-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "mg-input-toggle",
      "readme": "## Design\n\n**RUX-1** : Le clic sur toute la zone du composant fait alterner la valeur sélectionnée.\n\n**RUX-2** : La première valeur est toujours sélectionnée par défaut.\n\n**RUX-3** : Quand la propriété \"on/off\" est utilisée, la première valeur est toujours la valeur désactivée et le style est adapté.\n\n**RUX-4** : Les valeurs doivent être retranscrites par du texte ou des icones.\n\n### Usages\n\n![](./mg-input-toggle/doc/img/usages.png)\n\n### Spécifications\n\n![](./mg-input-toggle/doc/img/specs.png)\n\n### Readonly\n\n![](./mg-input-toggle/doc/img/readonly.png)\n",
      "docs": "**RUX-1** : Le clic sur toute la zone du composant fait alterner la valeur sélectionnée.\n\n**RUX-2** : La première valeur est toujours sélectionnée par défaut.\n\n**RUX-3** : Quand la propriété \"on/off\" est utilisée, la première valeur est toujours la valeur désactivée et le style est adapté.\n\n**RUX-4** : Les valeurs doivent être retranscrites par du texte ou des icones.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Define if input is disabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "helpText",
          "type": "string",
          "mutable": false,
          "attr": "help-text",
          "reflectToAttr": false,
          "docs": "Add a help text under the input, usually expected data format and example",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-input-toggle')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isIcon",
          "type": "boolean",
          "mutable": false,
          "attr": "is-icon",
          "reflectToAttr": false,
          "docs": "Define if toggle display icon",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "isOnOff",
          "type": "boolean",
          "mutable": false,
          "attr": "is-on-off",
          "reflectToAttr": false,
          "docs": "Define if toggle have on/off style",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "ToggleValue[] | string[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Items are the possible options to select",
          "docsTags": [
            {
              "name": "returns"
            }
          ],
          "values": [
            {
              "type": "ToggleValue[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Input label",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "labelHide",
          "type": "boolean",
          "mutable": false,
          "attr": "label-hide",
          "reflectToAttr": false,
          "docs": "Define if label is visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelOnTop",
          "type": "boolean",
          "mutable": false,
          "attr": "label-on-top",
          "reflectToAttr": false,
          "docs": "Define if label is displayed on top",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Input name\nIf not set the value equals the identifier",
          "docsTags": [],
          "default": "this.identifier",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Define if input is readonly",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "string",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "Add a tooltip message next to the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "any",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Component value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "input-valid",
          "detail": "boolean",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when checking validity",
          "docsTags": []
        },
        {
          "event": "value-change",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when value change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-tooltip",
        "mg-icon",
        "mg-input-title",
        "mg-character-left"
      ],
      "dependencyGraph": {
        "mg-input-toggle": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-message/mg-message.tsx",
      "encapsulation": "shadow",
      "tag": "mg-message",
      "readme": "## Design\n\n**RG-01** : L'élément peut être de 4 types différents selon le message à indiquer:\n- validation (vert)\n- information (bleu)\n- avertissement (orange)\n- erreur (rouge)\n\n**RG-02** : Lors de la mise en place d'un déclencheur (bouton...) qui peut provoquer l'affichage de messages. Par défaut, l'exécution du déclencheur efface les messages précédents dans l'écran du même type\n\n\n### Standard\n\n![](./mg-message/doc/img/templates-standard.png)\n\n### Actions\n\n![](./mg-message/doc/img/templates-actions.png)\n\n### Fermer\n\n\n![](./mg-message/doc/img/templates-fermer.png)\n\n### Formes et couleurs\n\n![](./mg-message/doc/img/formes-couleurs.png)\n\n### Tailles\n\n![](./mg-message/doc/img/tailles.png)\n### Espacements\n\n#### Standard\n\n![](./mg-message/doc/img/espacements-standard.png)\n\n#### Actions\n\n![](./mg-message/doc/img/espacements-actions.png)\n\n#### Fermer\n\n![](./mg-message/doc/img/espacements-fermer.png)\n\n### Polices\n\n![](./mg-message/doc/img/polices.png)\n\n",
      "docs": "**RG-01** : L'élément peut être de 4 types différents selon le message à indiquer:\n- validation (vert)\n- information (bleu)\n- avertissement (orange)\n- erreur (rouge)\n\n**RG-02** : Lors de la mise en place d'un déclencheur (bouton...) qui peut provoquer l'affichage de messages. Par défaut, l'exécution du déclencheur efface les messages précédents dans l'écran du même type",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "mutable": true,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if message has a cross button\nRG 01: https://jira.mgdis.fr/browse/PDA9-140",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "delay",
          "type": "number",
          "mutable": false,
          "attr": "delay",
          "reflectToAttr": false,
          "docs": "Add a delay to hide/close message when it passed\nValue is defined in seconds and must greater than 2 seconds (PDA9-314 RG-06)",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hide",
          "type": "boolean",
          "mutable": true,
          "attr": "hide",
          "reflectToAttr": false,
          "docs": "Define if message is hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-message')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Message variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "component-hide",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when message is hidden",
          "docsTags": []
        },
        {
          "event": "component-show",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when message is diplayed",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon",
        "mg-button"
      ],
      "dependencyGraph": {
        "mg-message": [
          "mg-icon",
          "mg-button"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-modal/mg-modal.tsx",
      "encapsulation": "shadow",
      "tag": "mg-modal",
      "readme": "## Design\n\n**RG-01** : Une modale possède :\n\n- une croix en haut à droite\n- un titre\n- un corps composé de champs ou d'un message\n- un bouton de validation\n- un bouton d'annulation\n\n**RG-02** : Au clic sur la croix, la fenêtre se ferme et aucun traitement n'est effectué.\n\n**RG-03** : Au clic sur le bouton d'annulation ou lors de l'appui de la touche `<Echap>`, la fenêtre se ferme et aucun traitement n'est effectué.\n\n**RG-04** : Au clic sur le bouton de validation, le traitement est effectué et la fenêtre se ferme.\n\n**RG-05** : Tant que l'utilisateur n'utilise pas sur un de ces 3 boutons, la modale ne se ferme pas.\n\n**RG-06** : La modale permet de focaliser l'attention sur ce qu'elle demande : une confirmation ou une annulation.\nEn ce sens le reste de l'écran ne doit pas être accessible :\n\n- il est masqué par un backdrop.\n- le clic sur le backdrop ne ferme pas la fenêtre\n\n**RG-01** : Le titre de la fenêtre est écrit avec un nom\nEx : Ajout de la valeur\n\n**RG-02** : Le libellé du bouton de validation est le verbe à l'infinitif de l'action en cours.\nEviter le verbe \"Valider\" si un plus explicite est possible\nEx : \"Ajouter\" pour l'ajout d'une valeur\n\"Supprimer\" pour la suppression d'une valeur\n\"Modifier\" pour la modification d'une valeur\n\n**RG-03** : Icone ou pas icone sur les boutons d'action ?\nDans le cas d'une action ciblée, l'ico peut aider à la compréhension voir même rassurer > icone check qui valide l'action.\nDans le cas d'un choix de confirmation/annulation : pas nécessaire voire superflu > le terme suffit \"Enregistrer/Annuler\",\nEx : si je mets un check devant le terme \"Supprimer\" qui est le bouton de validation d'une suppression, le check renvoie à du positif alors que l'action de suppression est négative, et le bouton Annuler également, donc pour ne pas ajouter à la confusion ne pas mettre d'icone...\n\n![](./mg-modal/doc/img/modale.png)\n\n### Formes\n\n![](./mg-modal/doc/img/formes-modale.png)\n\n### Fonts\n\n![](./mg-modal/doc/img/font-modale.png)\n\n### Espacements\n### Espacements entre les bords et le contenu\n\n![](./mg-modal/doc/img/espacements-modale-1.png)\n\n\n### Espacements entre le titre, le texte et les boutons\n\n![](./mg-modal/doc/img/espacements-modale-2.png)\n![](./mg-modal/doc/img/espacements-modale-3.png)\n\n### Espacements entre le titre et le bouton croix\n\n![](./mg-modal/doc/img/espacements-modale-4.png)\n![](./mg-modal/doc/img/espacements-modale-45.png)\n\n### Alignements\n\n![](./mg-modal/doc/img/alignements-modale.png)\n\n### Tailles\n\n![](./mg-modal/doc/img/tailles-modale.png)\n\n### Couleurs\n\n![](./mg-modal/doc/img/couleurs-modale.png)\n\n### Backdrop\n\n![](./mg-modal/doc/img/backdrop.png)\n\n- Couleur : noir\n- Intensité : 5\n- Luminosité : 3\n",
      "docs": "**RG-01** : Une modale possède :\n\n- une croix en haut à droite\n- un titre\n- un corps composé de champs ou d'un message\n- un bouton de validation\n- un bouton d'annulation\n\n**RG-02** : Au clic sur la croix, la fenêtre se ferme et aucun traitement n'est effectué.\n\n**RG-03** : Au clic sur le bouton d'annulation ou lors de l'appui de la touche `<Echap>`, la fenêtre se ferme et aucun traitement n'est effectué.\n\n**RG-04** : Au clic sur le bouton de validation, le traitement est effectué et la fenêtre se ferme.\n\n**RG-05** : Tant que l'utilisateur n'utilise pas sur un de ces 3 boutons, la modale ne se ferme pas.\n\n**RG-06** : La modale permet de focaliser l'attention sur ce qu'elle demande : une confirmation ou une annulation.\nEn ce sens le reste de l'écran ne doit pas être accessible :\n\n- il est masqué par un backdrop.\n- le clic sur le backdrop ne ferme pas la fenêtre\n\n**RG-01** : Le titre de la fenêtre est écrit avec un nom\nEx : Ajout de la valeur\n\n**RG-02** : Le libellé du bouton de validation est le verbe à l'infinitif de l'action en cours.\nEviter le verbe \"Valider\" si un plus explicite est possible\nEx : \"Ajouter\" pour l'ajout d'une valeur\n\"Supprimer\" pour la suppression d'une valeur\n\"Modifier\" pour la modification d'une valeur\n\n**RG-03** : Icone ou pas icone sur les boutons d'action ?\nDans le cas d'une action ciblée, l'ico peut aider à la compréhension voir même rassurer > icone check qui valide l'action.\nDans le cas d'un choix de confirmation/annulation : pas nécessaire voire superflu > le terme suffit \"Enregistrer/Annuler\",\nEx : si je mets un check devant le terme \"Supprimer\" qui est le bouton de validation d'une suppression, le check renvoie à du positif alors que l'action de suppression est négative, et le bouton Annuler également, donc pour ne pas ajouter à la confusion ne pas mettre d'icone...\n\n![](./mg-modal/doc/img/modale.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "mutable": true,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if modal has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hide",
          "type": "boolean",
          "mutable": true,
          "attr": "hide",
          "reflectToAttr": false,
          "docs": "Define if modal is hidden",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-modal')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "modalTitle",
          "type": "string",
          "mutable": false,
          "attr": "modal-title",
          "reflectToAttr": false,
          "docs": "Displayed modal title\nrequired",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "component-hide",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when modal is hidden",
          "docsTags": []
        },
        {
          "event": "component-show",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when modal is diplayed",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "keydown",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-modal": [
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-pagination/mg-pagination.tsx",
      "encapsulation": "shadow",
      "tag": "mg-pagination",
      "readme": "## Design\n\n### Composantes\n\n![](./mg-pagination/doc/img/pagination-components.png)\n\n### Nombre d'éléments affichés\n\n![](./mg-pagination/doc/img/pagination-nbelem.png)\n\n### Navigation des pages\n\n![](./mg-pagination/doc/img/page-navig.png)\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "mutable": true,
          "attr": "current-page",
          "reflectToAttr": true,
          "docs": "Component current page",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-pagination')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Panignation label. Is a short description.\nCustomize default value can be usefull to improve accessibility",
          "docsTags": [],
          "default": "'pagination'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "totalPages",
          "type": "number",
          "mutable": false,
          "attr": "total-pages",
          "reflectToAttr": false,
          "docs": "Component total pages",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "current-page-change",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when current page change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-input-select"
      ],
      "dependencyGraph": {
        "mg-pagination": [
          "mg-button",
          "mg-icon",
          "mg-input-select"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-select": [
          "mg-tooltip",
          "mg-icon",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-panel/mg-panel.tsx",
      "encapsulation": "shadow",
      "tag": "mg-panel",
      "readme": "## Design\n\n**RUX-01** : La zone gauche du header affiche le libellé de l'item, cette zone est cliquable et permet de déplier/replier le volet.\nSi aucun contenu n'est disponible, le volet ne peut être déplié.\nLorsque le volet est déplié, l'icone est inversé verticalement.\n\n**RUX-02** : La zone droite du header peut accueillir tous composants.\n\n![](./mg-panel/doc/img/volet.png)\n\n### Composants\n\n![](./mg-panel/doc/img/composants.png)\n\n### Tailles\n\n![](./mg-panel/doc/img/tailles.png)\n\n### Espacements\n\n![](./mg-panel/doc/img/espacements.png)\n\n### Alignements\n\n![](./mg-panel/doc/img/alignements.png)\n\n### Styles\n\n![](./mg-panel/doc/img/styles.png)\n\n### Titre modifiable\n\n![](./mg-panel/doc/img/titre-modifiable.png)\n\n#### Composants\n\n![](./mg-panel/doc/img/titre-modifiable-composants.png)\n\n#### Espacements\n\n![](./mg-panel/doc/img/titre-modifiable-espacements.png)\n\n### Responsive\n\n![](./mg-panel/doc/img/responsive.png)\n",
      "docs": "**RUX-01** : La zone gauche du header affiche le libellé de l'item, cette zone est cliquable et permet de déplier/replier le volet.\nSi aucun contenu n'est disponible, le volet ne peut être déplié.\nLorsque le volet est déplié, l'icone est inversé verticalement.\n\n**RUX-02** : La zone droite du header peut accueillir tous composants.\n\n![](./mg-panel/doc/img/volet.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "expanded",
          "type": "boolean",
          "mutable": true,
          "attr": "expanded",
          "reflectToAttr": false,
          "docs": "Panel is opened",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-panel')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelTitle",
          "type": "string",
          "mutable": true,
          "attr": "panel-title",
          "reflectToAttr": false,
          "docs": "Panel title",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "titleEditable",
          "type": "boolean",
          "mutable": false,
          "attr": "title-editable",
          "reflectToAttr": false,
          "docs": "Panel title is editabled",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "title-change",
          "detail": "string",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emmited event when title change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-button",
        "mg-icon",
        "mg-input-text"
      ],
      "dependencyGraph": {
        "mg-panel": [
          "mg-button",
          "mg-icon",
          "mg-input-text"
        ],
        "mg-button": [
          "mg-icon"
        ],
        "mg-input-text": [
          "mg-icon",
          "mg-tooltip",
          "mg-input-title",
          "mg-character-left"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-popover/mg-popover.tsx",
      "encapsulation": "scoped",
      "tag": "mg-popover",
      "readme": "## Design \n\nUn popover est plus enrichi qu'une tooltip mais moins bloquant qu'une modale\n\n**RUX-01** : la fenêtre est affichée au clic sur son déclencheur\n\n**RUX-02** : la fenêtre est affichée à côté de son déclencheur, le plus souvent en dessous. Un triangle (en css) fait le lien entre le déclencheur et la fenêtre.\n\n**RUX-03** : la fenêtre se ferme:\n\n- au clic sur son déclencheur ou\n- au clic en dehors de la fenêtre ou\n- à la pression de la touche ECHAP\n- au clic sur le bouton de fermeture en haut à droite\n\n**RUX-04** : la taille de la fenêtre est déterminée par le contenu (prévoir une taille max pour éviter des écueils)\n\n**RUX-05** : le titre et le bouton fermer sont optionnels\n\n![](./mg-popover/doc/img/2affichages.png)\n\n### Formes\n\n![](./mg-popover/doc/img/formes-popover.png)\n\n### Fonts\n\n![](./mg-popover/doc/img/font-popover.png)\n\n### Espacements\n\n![](./mg-popover/doc/img/espacements-popover-1.png)\n\n#### Entre les bords et le contenu\n\n![](./mg-popover/doc/img/espacements-popover-2.png)\n\n#### Entre le header et le contenu\n\n![](./mg-popover/doc/img/espacements-popover-3.png)\n\n#### Entre le header et le bouton fermé\n\n![](./mg-popover/doc/img/espacements-popover-4.png)\n\n### Alignements\n\n![](./mg-popover/doc/img/alignements-popover.png)\n\n### Positionnements\n\n![](./mg-popover/doc/img/positionement-popover.png)\n![](./mg-popover/doc/img/positionement-triangle.png)\n\n### Couleurs\n\n![](./mg-popover/doc/img/couleurs-popover.png)\n\n### Tailles\n\n![](./mg-popover/doc/img/tailles-popover.png)\n\n### Shadow\n\n![](./mg-popover/doc/img/shadow-popover.png)\n",
      "docs": "Un popover est plus enrichi qu'une tooltip mais moins bloquant qu'une modale\n\n**RUX-01** : la fenêtre est affichée au clic sur son déclencheur\n\n**RUX-02** : la fenêtre est affichée à côté de son déclencheur, le plus souvent en dessous. Un triangle (en css) fait le lien entre le déclencheur et la fenêtre.\n\n**RUX-03** : la fenêtre se ferme:\n\n- au clic sur son déclencheur ou\n- au clic en dehors de la fenêtre ou\n- à la pression de la touche ECHAP\n- au clic sur le bouton de fermeture en haut à droite\n\n**RUX-04** : la taille de la fenêtre est déterminée par le contenu (prévoir une taille max pour éviter des écueils)\n\n**RUX-05** : le titre et le bouton fermer sont optionnels\n\n![](./mg-popover/doc/img/2affichages.png)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closeButton",
          "type": "boolean",
          "mutable": false,
          "attr": "close-button",
          "reflectToAttr": false,
          "docs": "Define if popover has a cross button",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "boolean",
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Display popover",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "default": "createID('mg-popover')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Popover placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-button",
        "mg-icon"
      ],
      "dependencyGraph": {
        "mg-popover": [
          "mg-button",
          "mg-icon"
        ],
        "mg-button": [
          "mg-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/molecules/mg-tabs/mg-tabs.tsx",
      "encapsulation": "scoped",
      "tag": "mg-tabs",
      "readme": "## Design\n\n### Espacements:\n\n- Standard : @base = 10px\n- Large : @base = 18px\n\n#### Entre le bord et les éléments de l'onglet\n\n![](./mg-tabs/doc/img/espacements-internes.png)\n\n#### Entre les éléments internes\n\n![](./mg-tabs/doc/img/espacements-elements-internes.png)\n\n- si uniquement du texte, pas d'espacements supplémentaires,\n- si pas de badge : pas d'espacement supplémentaire à droite\n- si uniquement icone : pas d'espacement supplémentaire à droite\n\n#### Entre les onglets : pas de marges\n\n![](./mg-tabs/doc/img/espacements-onglets.png)\n\n### Tailles\n\n![](./mg-tabs/doc/img/tailles.png)\n\n### Etats\n\n![](./mg-tabs/doc/img/etats.png)\n\n### Responsive\n#### Retours à la ligne (gestion actuelle)\n![](./mg-tabs/doc/img/responsive-inline.png)\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeTab",
          "type": "number",
          "mutable": true,
          "attr": "active-tab",
          "reflectToAttr": true,
          "docs": "Active tab number\ndefault: first is 1",
          "docsTags": [],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Identifier is used for the element ID (id is a reserved prop in Stencil.js)\nIf not set, it will be created.",
          "docsTags": [],
          "default": "createID('mg-tabs')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "items",
          "type": "TabItem[] | string[]",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Tabs items\nRequired",
          "docsTags": [],
          "values": [
            {
              "type": "TabItem[]"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Tabs label. Include short tabs description.\nRequired for accessibility",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "size",
          "type": "string",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Define tabs size",
          "docsTags": [],
          "default": "'regular'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "active-tab-change",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emited event when active tab change",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "mg-icon",
        "mg-badge"
      ],
      "dependencyGraph": {
        "mg-tabs": [
          "mg-icon",
          "mg-badge"
        ]
      }
    },
    {
      "filePath": "./src/components/atoms/mg-tag/mg-tag.tsx",
      "encapsulation": "shadow",
      "tag": "mg-tag",
      "readme": "## Design\n\n### Style\n\n![](./mg-tag/doc/img/specs.png)\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "outline",
          "type": "boolean",
          "mutable": false,
          "attr": "outline",
          "reflectToAttr": false,
          "docs": "Define if button is using outline style",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "variant",
          "type": "string",
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Define button variant",
          "docsTags": [],
          "default": "variants[0]",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/atoms/mg-tooltip/mg-tooltip.tsx",
      "encapsulation": "scoped",
      "tag": "mg-tooltip",
      "readme": "## Design\n\nLes infobulles sont des messages qui permettent d’obtenir une information complémentaire sur un élément.\nElles se présentent sous la forme d’un message qui apparaît au survol et à la prise de focus clavier d’un élément.\nLes infobulles sont dites « personnalisées » lorsqu’elles ne sont pas construites sur la base du code HTML standard prévu pour ces éléments par la spécification : l’attribut title.\nNotre composant \"infobulle personnalisée\" est appelé ici \"tooltip\"\n\n**RUX-01** : La tooltip doit s’afficher lorsque l’élément qui en permet l’affichage :\n\nEst survolé par la souris.\nPrend le focus clavier.\n\n**RUX-02** : La tooltip doit être masquée lorsque l’élément qui en permet l’affichage :\n\nN’est plus survolé par la souris.\nPerd le focus clavier.\nUne pression de la touche Échap doit permettre de masquer l’infobulle.\n\n**RUX-03** : L’infobulle doit rester affichée lorsque son contenu est survolé par la souris.\n\n**RUX-04** : La tooltip peut être placée au dessus, à droite, en dessous, à gauche de l'élément qu'elle décrit.\n\nPar défaut, le message s'affiche en bas de l'élément.\n\n**RUX-05** : Si l'élément est situé au bord de l'écran, la tooltip se décale pour être toujours visible.\n\n### Formes\n\n![](./mg-tooltip/doc/img/formes-tooltip.png)\n\n### Fonts\n\n![](./mg-tooltip/doc/img/font-tooltip.png)\n\n### Espacements\n\n![](./mg-tooltip/doc/img/espacements-tooltip.png)\n\n### Alignements\n\n![](./mg-tooltip/doc/img/alignements-tooltip.png)\n\n### Positionnement\n\n![](./mg-tooltip/doc/img/positionnement-tooltip-1.png)\n![](./mg-tooltip/doc/img/positionnement-tooltip-2.png)\n\n### Couleurs\n\n![](./mg-tooltip/doc/img/tooltip-couleurs.png)\n\n### Tailles\n\n![](./mg-tooltip/doc/img/tailles-tooltip.png)\n",
      "docs": "Les infobulles sont des messages qui permettent d’obtenir une information complémentaire sur un élément.\nElles se présentent sous la forme d’un message qui apparaît au survol et à la prise de focus clavier d’un élément.\nLes infobulles sont dites « personnalisées » lorsqu’elles ne sont pas construites sur la base du code HTML standard prévu pour ces éléments par la spécification : l’attribut title.\nNotre composant \"infobulle personnalisée\" est appelé ici \"tooltip\"\n\n**RUX-01** : La tooltip doit s’afficher lorsque l’élément qui en permet l’affichage :\n\nEst survolé par la souris.\nPrend le focus clavier.\n\n**RUX-02** : La tooltip doit être masquée lorsque l’élément qui en permet l’affichage :\n\nN’est plus survolé par la souris.\nPerd le focus clavier.\nUne pression de la touche Échap doit permettre de masquer l’infobulle.\n\n**RUX-03** : L’infobulle doit rester affichée lorsque son contenu est survolé par la souris.\n\n**RUX-04** : La tooltip peut être placée au dessus, à droite, en dessous, à gauche de l'élément qu'elle décrit.\n\nPar défaut, le message s'affiche en bas de l'élément.\n\n**RUX-05** : Si l'élément est situé au bord de l'écran, la tooltip se décale pour être toujours visible.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": true,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disable tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "display",
          "type": "boolean",
          "mutable": true,
          "attr": "display",
          "reflectToAttr": false,
          "docs": "Display tooltip",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "identifier",
          "type": "string",
          "mutable": false,
          "attr": "identifier",
          "reflectToAttr": false,
          "docs": "Sets an `id` attribute.\nNeeded by the input for accessibility `aria-decribedby`.",
          "docsTags": [],
          "default": "createID('mg-tooltip')",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Displayed message in the tooltip",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "placement",
          "type": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "mutable": false,
          "attr": "placement",
          "reflectToAttr": false,
          "docs": "Tooltip placement",
          "docsTags": [],
          "default": "'bottom'",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "auto-end",
              "type": "string"
            },
            {
              "value": "auto-start",
              "type": "string"
            },
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "mg-input-checkbox",
        "mg-input-date",
        "mg-input-numeric",
        "mg-input-password",
        "mg-input-radio",
        "mg-input-select",
        "mg-input-text",
        "mg-input-textarea",
        "mg-input-toggle"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "mg-input-checkbox": [
          "mg-tooltip"
        ],
        "mg-input-date": [
          "mg-tooltip"
        ],
        "mg-input-numeric": [
          "mg-tooltip"
        ],
        "mg-input-password": [
          "mg-tooltip"
        ],
        "mg-input-radio": [
          "mg-tooltip"
        ],
        "mg-input-select": [
          "mg-tooltip"
        ],
        "mg-input-text": [
          "mg-tooltip"
        ],
        "mg-input-textarea": [
          "mg-tooltip"
        ],
        "mg-input-toggle": [
          "mg-tooltip"
        ]
      }
    }
  ]
}