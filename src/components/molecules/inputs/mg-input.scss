/**
 * Common style for MGDIS inputs
 */

.mg-input {
  // Display
  display: flex;
  align-items: flex-start;
  min-height: var(--default-size);

  /**
  * Label
  */

  mg-input-title {
    margin-top: calc((var(--default-size) - var(--font-size-base) * var(--line-height)) / 2);
    margin-right: var(--mg-inputs-title-horizontal-space, var(--mg-inputs-spacer));
    text-align: end;
  }

  &:not(.mg-input--label-on-top) mg-input-title {
    width: var(--mg-inputs-title-width, auto);
    flex-shrink: var(--mg-inputs-shrink, 1);
  }

  // Display label on top
  &.mg-input--label-on-top {
    flex-direction: column;

    .mg-input__input-container {
      width: 100%;
    }

    .mg-input__input-group-container--radio {
      margin-top: 0.7rem;
    }
  }

  &.mg-input--numeric input {
    text-align: right;
  }

  &__title {
    display: flex;
    align-items: baseline;
    margin-bottom: 0.3rem;

    mg-input-title {
      margin-top: 0;
      margin-right: 0;
      text-align: start;
    }

    mg-tooltip {
      margin-top: 0;
    }

    .mg-input__button-toggle {
      margin-top: 0.5rem;
    }
  }

  /**
   * Input style
   */
  input[type='text'],
  input[type='password'],
  input[type='date'],
  &.mg-input--date input, /* IE FIX */
  textarea,
  select {
    // Display
    padding: calc((var(--default-size) - var(--font-size-base) * var(--line-height)) / 2) var(--mg-inputs-spacer);
    height: var(--default-size);
    box-sizing: border-box;
    // Decoration
    border-width: var(--mg-inputs-border-width);
    border-style: solid;
    border-color: var(--mg-inputs-color);
    border-radius: var(--mg-inputs-border-radius);
    // Font
    font-family: var(--font-family-body);
    color: hsl(var(--color-dark));
    font-size: var(--font-size-base);

    // placeholder
    &::placeholder {
      color: var(--mg-inputs-color);
      font-style: italic;
    }

    &:focus {
      box-shadow: 0 0 0.6rem hsla(var(--mg-inputs-color-shadow-focus-hsl), 0.5);
    }
  }

  textarea {
    height: auto;
  }

  select {
    padding-top: 0;
    padding-bottom: 0;
    padding-right: 0;
  }

  legend {
    padding-inline-start: 0;
    padding-inline-end: 0;
  }

  input[type='radio'],
  input[type='checkbox'] {
    flex-shrink: 0; /* Ensure checkbox won't resize in flex element */
    width: var(--mg-input-check-size);
    height: var(--mg-input-check-size);
    margin-top: calc((var(--font-size-base) * var(--line-height) - var(--mg-input-check-size)) / 2);
    margin-right: 0.6rem;
    margin-bottom: 0;
    margin-left: 0;
  }

  // Ensure to keed input size on readonly
  .mg-input__input-container > strong {
    display: inline-block;
    margin-top: calc((var(--default-size) - var(--font-size-base) * var(--line-height)) / 2);
    min-height: var(--default-size);
  }

  /**
   * Tooltip
   */
  mg-tooltip {
    display: inline-flex;
    width: var(--mg-icon-regular-size);
    height: var(--mg-icon-regular-size);
    margin-left: var(--mg-inputs-spacer);
  }

  &:not(.mg-input--label-on-top) {
    mg-tooltip {
      margin-top: calc((var(--default-size) - var(--mg-icon-regular-size)) / 2);
    }
  }

  // specifics spacers for checkbox and radio
  &--radio,
  &--checkbox {
    &:not(.mg-input--label-on-top) {
      mg-tooltip {
        margin-left: 2rem;
      }
    }
  }

  /**
   * Manage space between input and first message
   */
  .mg-input__input {
    display: flex;

    & + mg-character-left,
    & + .mg-input__help-text,
    & + .mg-input__error {
      margin-top: 0.5rem;
    }
  }

  /**
   * Character left
   */
  mg-character-left {
    display: none;
    margin-top: 0.5rem;
  }

  &.is-focused {
    mg-character-left {
      display: block;
    }
  }

  /**
   * Style when input is not valid
   */
  &.is-not-valid {
    color: hsl(var(--color-danger));
    input[type='text'],
    input[type='date'],
    textarea,
    select {
      border-color: hsl(var(--color-danger));
    }
  }

  /**
  * input group container
  */
  &__input-group-container {
    margin: 0;
    padding: 0;
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    column-gap: 2.3rem;
    row-gap: 1rem;
    &.mg-input__input-group-container--radio,
    &.mg-input__input-group-container--checkbox {
      margin-top: calc((var(--default-size) - var(--font-size-base) * var(--line-height)) / 2);
    }
    &.mg-input__input-group-container--vertical {
      flex-direction: column;
    }
  }

  /**
  * input group
  */
  &__input-group {
    display: flex;
    align-items: top;
  }

  /**
  * Set text and textarea inputs width to 100%
  */
  &.mg-input--text,
  &.mg-input--textarea,
  &.mg-input--password {
    &:not(.mg-input--label-on-top) {
      justify-content: space-between;
    }

    .mg-input__input-container {
      flex: auto;
      width: 100%;

      input[type='text'],
      textarea,
      input[type='password'] {
        width: 100%;
      }
    }
  }
}

fieldset.mg-input {
  border: 0;
  margin: 0;
  padding: 0;
}

/**
* Toogle
*/

// variables
$lightBlue: hsl(var(--color-info-h) calc(var(--color-info-s) - 64%) calc(var(--color-info-l) + 55%));
$lightDark: hsl(var(--color-dark-h) calc(var(--color-dark-s) - 30%) calc(var(--color-dark-l) + 75%));

//mixins
@mixin mg-input-toggle__size-generator($elementPadding, $childElementPadding) {
  $elementLineHeight: calc(var(--font-size-base) + 0.2rem);
  $elementMinSize: calc(#{$elementLineHeight} + #{$childElementPadding} * 2);

  .mg-input__button-toggle {
    margin-top: calc((var(--default-size) - (#{$elementMinSize} + #{$elementPadding} * 2 + var(--mg-inputs-border-width) * 2)) / 2);
    padding: $elementPadding;
    border-radius: calc(
      (#{$elementLineHeight} + #{$elementPadding} * 2 + #{$childElementPadding} * 2) / var(--mg-input-toggle-border-radius-ratio)
    ); // = (lineheight + element vertical-padding + child vertical-padding) / ratio
    line-height: $elementLineHeight;
  }

  .mg-input__toggle-item-container {
    padding: $childElementPadding 0;
    min-width: $elementMinSize;
    min-height: $elementMinSize;
  }
  .mg-input__toggle-item-container {
    &,
    &:before {
      border-radius: calc((#{$elementLineHeight} + #{$childElementPadding} * 2) / var(--mg-input-toggle-border-radius-ratio)); // = (lineheight + child vertical-padding) / ratio
    }
  }

  // icon variation
  .mg-input.mg-input--toggle-is-icon .mg-input__toggle-item-container mg-icon {
    height: $elementLineHeight;
    width: $elementLineHeight;
  }

  // readonly variation
  .mg-input.mg-input--toggle-readonly .mg-input__button-toggle {
    margin-top: calc((var(--default-size) - #{$elementMinSize}) / 2);
  }
}

@mixin mg-input-toggle__text-background($color) {
  content: '';
  position: absolute;
  background-color: $color;
  width: 100%;
  height: 100%;
}

@include mg-input-toggle__size-generator(0.2rem, 0.5rem);

.mg-input__button-toggle {
  display: flex;
  overflow: hidden;
  &:not(.mg-input--toggle-readonly .mg-input__button-toggle) {
    background-color: hsl(var(--color-light));
    // border
    border-width: var(--mg-inputs-border-width);
    border-style: solid;
    border-color: var(--mg-inputs-color);
  }
}

.mg-input__toggle-item-container {
  display: flex;
  align-items: center;
  height: 100%;
  position: relative;
  // font
  &:first-of-type {
    color: hsl(var(--color-info));
    font-weight: 600;
  }
  &:last-of-type {
    color: hsl(var(--color-dark));
  }
  // slot
  & > * {
    z-index: 1;
    &:not(.mg-input--toggle-readonly .mg-input__toggle-item-container > *) {
      white-space: nowrap;
      text-overflow: ellipsis;
      overflow: hidden;
    }
    &:not(mg-icon) {
      padding: 0 0.9rem;
    }
  }
}

.mg-input.mg-input--toggle:not(.mg-input--toggle-is-icon) .mg-input__toggle-item-container:first-of-type::before {
  @include mg-input-toggle__text-background($lightBlue);
}

// toggle default active variation
.mg-input.mg-input--toggle-is-active {
  .mg-input__toggle-item-container {
    &:first-of-type {
      color: hsl(var(--color-dark));
      font-weight: unset;
    }
    &:last-of-type {
      font-weight: 600;
      color: hsl(var(--color-info));
    }
  }
  &:not(.mg-input--toggle-is-icon) .mg-input__toggle-item-container {
    &:first-of-type::before {
      content: unset;
    }
    &:last-of-type::before {
      @include mg-input-toggle__text-background($lightBlue);
    }
  }
}

// toggle icon variation
.mg-input.mg-input--toggle-is-icon {
  .mg-input__toggle-item-container {
    &:first-of-type {
      opacity: 1;
    }
    &:last-of-type {
      opacity: 0;
    }

    // slot
    > *:not(mg-icon) {
      padding: 0;
      margin-left: auto;
      margin-right: auto;
    }
    mg-icon {
      display: flex;
      margin-left: auto;
      margin-right: auto;
    }
  }

  &.mg-input--toggle-is-active .mg-input__toggle-item-container {
    &:first-of-type {
      background-color: unset;
      opacity: 0;
    }
    &:last-of-type {
      opacity: 1;
      background-color: $lightBlue;
    }
  }

  .mg-input__toggle-item-container:first-of-type {
    background-color: $lightBlue;
  }
}

// disabled variation
.mg-input.mg-input--toggle-disabled .mg-input__button-toggle {
  opacity: 30%;
}

// toggle on-off variation
.mg-input.mg-input--toggle-is-on-off {
  .mg-input__toggle-item-container:first-of-type {
    color: hsl(var(--color-dark));
  }

  &.mg-input--toggle-is-active {
    &:not(.mg-input--toggle-is-icon) .mg-input__toggle-item-container:first-of-type::before {
      content: unset;
    }

    &.mg-input--toggle-is-icon .mg-input__toggle-item-container:first-of-type {
      background: none;
    }
  }

  &:not(.mg-input--toggle-is-icon) {
    .mg-input__toggle-item-container:first-of-type::before {
      @include mg-input-toggle__text-background($lightDark);
    }
    &.mg-input--toggle-is-active .mg-input__toggle-item-container:first-of-type::before {
      content: unset;
    }
  }

  &.mg-input--toggle-is-icon .mg-input__toggle-item-container:first-of-type {
    background-color: $lightDark;
  }
}

// readonly variation
.mg-input.mg-input--toggle-readonly {
  .mg-input__button-toggle {
    background: none;
    border: none;
    overflow: hidden;
    padding: 0;
  }
  &:not(.mg-input--toggle-is-active) .mg-input__toggle-item-container:last-of-type {
    display: none;
  }
  &.mg-input--toggle-is-active .mg-input__toggle-item-container:first-of-type {
    display: none;
  }
}

// clicked variation - animation trigger
.mg-input.mg-input--toggle-clicked {
  &:not(.mg-input--toggle-is-icon) {
    .mg-input__toggle-item-container::before {
      // animation
      animation-timing-function: ease-in-out;
      animation-duration: 0.2s;
      animation-name: toggleUnactive;
    }
    &.mg-input--toggle-is-active .mg-input__toggle-item-container::before {
      // animation
      animation-name: toggleActive;
    }
  }
  &.mg-input--toggle-is-icon {
    .mg-input__toggle-item-container {
      // animation
      animation-timing-function: ease-in-out;
      animation-duration: 0.2s;
      animation-name: toggleUnactive;
    }
    &.mg-input--toggle-is-active .mg-input__toggle-item-container {
      // animation
      animation-name: toggleActive;
    }
  }
}

/**
  * Animations
  */

@keyframes toggleUnactive {
  from {
    transform: translateX(1.5em);
  }
  to {
    transform: translateX(0em);
  }
}

@keyframes toggleActive {
  from {
    transform: translateX(-1.5em);
  }
  to {
    transform: translateX(0em);
  }
}
