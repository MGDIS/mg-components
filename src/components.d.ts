/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MgButton {
        /**
          * Disable button
         */
        "disabled": boolean;
        /**
          * aria-label In case button text is not explicit enough
         */
        "label": string;
        /**
          * Define button style
         */
        "variant": string;
    }
    interface MgCharacterLeft {
        /**
          * Characters to count
         */
        "characters": string;
        /**
          * Character max length
         */
        "maxlength": number;
        /**
          * Reference Element ID for a11y link
         */
        "reference": string;
        /**
          * Template This sentence MUST contain {counter} in place of characters number left
         */
        "template": string;
    }
    interface MgIcon {
        /**
          * Icon to display
         */
        "icon": string;
        /**
          * Define icon size
         */
        "size": string;
    }
    interface MgInputText {
        /**
          * Template to use for characters left sentence
         */
        "characterLeftTemplate": string;
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Define if component should display character left
         */
        "displayCharacterLeft": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Input max length
         */
        "maxlength": number;
        /**
          * Input name If not set the value equals the reference
         */
        "name"?: string;
        /**
          * Input placeholder
         */
        "placeholder": string;
        /**
          * Input reference used for the input ID (id is a reserved prop in Stencil.js) If not set, an ID will be created
         */
        "reference"?: string;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgLabel {
        /**
          * Label input reference To match for/id
         */
        "reference": string;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "required": boolean;
    }
}
declare global {
    interface HTMLMgButtonElement extends Components.MgButton, HTMLStencilElement {
    }
    var HTMLMgButtonElement: {
        prototype: HTMLMgButtonElement;
        new (): HTMLMgButtonElement;
    };
    interface HTMLMgCharacterLeftElement extends Components.MgCharacterLeft, HTMLStencilElement {
    }
    var HTMLMgCharacterLeftElement: {
        prototype: HTMLMgCharacterLeftElement;
        new (): HTMLMgCharacterLeftElement;
    };
    interface HTMLMgIconElement extends Components.MgIcon, HTMLStencilElement {
    }
    var HTMLMgIconElement: {
        prototype: HTMLMgIconElement;
        new (): HTMLMgIconElement;
    };
    interface HTMLMgInputTextElement extends Components.MgInputText, HTMLStencilElement {
    }
    var HTMLMgInputTextElement: {
        prototype: HTMLMgInputTextElement;
        new (): HTMLMgInputTextElement;
    };
    interface HTMLMgLabelElement extends Components.MgLabel, HTMLStencilElement {
    }
    var HTMLMgLabelElement: {
        prototype: HTMLMgLabelElement;
        new (): HTMLMgLabelElement;
    };
    interface HTMLElementTagNameMap {
        "mg-button": HTMLMgButtonElement;
        "mg-character-left": HTMLMgCharacterLeftElement;
        "mg-icon": HTMLMgIconElement;
        "mg-input-text": HTMLMgInputTextElement;
        "mg-label": HTMLMgLabelElement;
    }
}
declare namespace LocalJSX {
    interface MgButton {
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * aria-label In case button text is not explicit enough
         */
        "label"?: string;
        /**
          * Define button style
         */
        "variant"?: string;
    }
    interface MgCharacterLeft {
        /**
          * Characters to count
         */
        "characters"?: string;
        /**
          * Character max length
         */
        "maxlength": number;
        /**
          * Reference Element ID for a11y link
         */
        "reference"?: string;
        /**
          * Template This sentence MUST contain {counter} in place of characters number left
         */
        "template"?: string;
    }
    interface MgIcon {
        /**
          * Icon to display
         */
        "icon"?: string;
        /**
          * Define icon size
         */
        "size"?: string;
    }
    interface MgInputText {
        /**
          * Template to use for characters left sentence
         */
        "characterLeftTemplate"?: string;
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Define if component should display character left
         */
        "displayCharacterLeft"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Input max length
         */
        "maxlength"?: number;
        /**
          * Input name If not set the value equals the reference
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onChanged"?: (event: CustomEvent<string>) => void;
        /**
          * Input placeholder
         */
        "placeholder"?: string;
        /**
          * Input reference used for the input ID (id is a reserved prop in Stencil.js) If not set, an ID will be created
         */
        "reference"?: string;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgLabel {
        /**
          * Label input reference To match for/id
         */
        "reference"?: string;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "required"?: boolean;
    }
    interface IntrinsicElements {
        "mg-button": MgButton;
        "mg-character-left": MgCharacterLeft;
        "mg-icon": MgIcon;
        "mg-input-text": MgInputText;
        "mg-label": MgLabel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mg-button": LocalJSX.MgButton & JSXBase.HTMLAttributes<HTMLMgButtonElement>;
            "mg-character-left": LocalJSX.MgCharacterLeft & JSXBase.HTMLAttributes<HTMLMgCharacterLeftElement>;
            "mg-icon": LocalJSX.MgIcon & JSXBase.HTMLAttributes<HTMLMgIconElement>;
            "mg-input-text": LocalJSX.MgInputText & JSXBase.HTMLAttributes<HTMLMgInputTextElement>;
            "mg-label": LocalJSX.MgLabel & JSXBase.HTMLAttributes<HTMLMgLabelElement>;
        }
    }
}
