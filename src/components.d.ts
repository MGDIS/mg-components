/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BadgeType } from "./components/atoms/mg-badge/mg-badge.conf";
import { CheckboxValue } from "./components/molecules/inputs/mg-input-checkbox/mg-input-checkbox.conf";
import { RadioOption } from "./components/molecules/inputs/mg-input-radio/mg-input-radio.conf";
import { SelectOption } from "./components/molecules/inputs/mg-input-select/mg-input-select.conf";
import { ToggleValue } from "./components/molecules/inputs/mg-input-toggle/mg-input-toggle.conf";
import { TabItem } from "./components/molecules/mg-tabs/mg-tabs.conf";
export namespace Components {
    interface MgBadge {
        /**
          * Badge label. Include short description. Required for accessibility
         */
        "label": BadgeType['label'];
        /**
          * Define if button is using outline style
         */
        "outline"?: boolean;
        /**
          * Badge value
         */
        "value": BadgeType['value'];
        /**
          * Define button variant
         */
        "variant"?: string;
    }
    interface MgButton {
        /**
          * Option to set input disable on click, in order to prevent multi-click. Parent component have to remove the attribute 'disabled' when the process ends.
         */
        "disableOnClick": boolean;
        /**
          * Disable button
         */
        "disabled": boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if button is round. Used for icon button.
         */
        "isIcon": boolean;
        /**
          * aria-label In case button text is not explicit enough
         */
        "label": string;
        /**
          * Define button variant
         */
        "variant": string;
    }
    interface MgCharacterLeft {
        /**
          * Sets the characters to count
         */
        "characters": string;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `arai-decribedby`.
         */
        "identifier": string;
        /**
          * Add maximum length
         */
        "maxlength": number;
        /**
          * Template to display remaining characters. Must have {counter} inside
         */
        "template": string;
    }
    interface MgIcon {
        /**
          * Icon to display
         */
        "icon": string;
        /**
          * Define icon size
         */
        "size": string;
        /**
          * Make the icon spin
         */
        "spin": boolean;
        /**
          * Define icon variant Add a background to the icon based on variant color
         */
        "variant": string;
    }
    interface MgInputCheckbox {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList": boolean;
        /**
          * Force invalid component
         */
        "invalid": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Force valid component
         */
        "valid": boolean;
        /**
          * Component value If item.value is `null`, checkbox will be indeterminate by default Required
         */
        "value": CheckboxValue[];
    }
    interface MgInputDate {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Define input maximum date format: yyyy-mm-dd
         */
        "max": string;
        /**
          * Define input minimum date format: yyyy-mm-dd
         */
        "min": string;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Define input pattern to validate
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputNumeric {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Maximum value
         */
        "max": number;
        /**
          * Minimum value
         */
        "min": number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Define numeric type
         */
        "type": string;
        /**
          * Define input pattern to validate
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputPassword {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Define input pattern to validate
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputRadio {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList": boolean;
        /**
          * Force invalid component
         */
        "invalid": boolean;
        /**
          * Items are the possible options to select Required
         */
        "items": string[] | RadioOption[];
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Force valid component
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgInputSelect {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input invalid state
         */
        "invalid": boolean;
        /**
          * Items are the possible options to select
         */
        "items": string[] | SelectOption[];
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder": string;
        /**
          * Option to disable placeholder
         */
        "placeholderDisabled": boolean;
        /**
          * Option to remove placeholder
         */
        "placeholderHide": boolean;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Define input valid state
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputText {
        /**
          * Template to use for characters left sentence
         */
        "characterLeftTemplate": string;
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Define if component should display character left
         */
        "displayCharacterLeft": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Input icon
         */
        "icon": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input max length
         */
        "maxlength": number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Define input pattern to validate
         */
        "pattern": string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage": string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Input type
         */
        "type": 'text' | 'search';
        /**
          * Define input pattern to validate
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputTextarea {
        /**
          * Template to use for characters left sentence
         */
        "characterLeftTemplate": string;
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Define if component should display character left
         */
        "displayCharacterLeft": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid": boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input max length
         */
        "maxlength": number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Define input pattern to validate
         */
        "pattern": string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage": string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder": string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Define if input is required
         */
        "required": boolean;
        /**
          * Define input pattern error message
         */
        "rows": number;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Define input pattern to validate
         */
        "valid": boolean;
        /**
          * Component value
         */
        "value": string;
    }
    interface MgInputTitle {
        /**
          * Label input id
         */
        "identifier": string;
        /**
          * Switch from label to fieldset sementic
         */
        "isLegend": boolean;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "required": boolean;
    }
    interface MgInputToggle {
        /**
          * Define if input is disabled
         */
        "disabled": boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText": string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if toggle display icon
         */
        "isIcon"?: boolean;
        /**
          * Define if toggle have on/off style
         */
        "isOnOff"?: boolean;
        /**
          * Items are the possible options to select Required
         */
        "items": string[] | ToggleValue[];
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide": boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop": boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Define if input is readonly
         */
        "readonly": boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip": string;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgMessage {
        /**
          * Define if message has a cross button RG 01: https://jira.mgdis.fr/browse/PDA9-140
         */
        "closeButton": boolean;
        /**
          * Add a delay to hide/close message when it passed Value is defined in seconds and must greater than 2 seconds (PDA9-314 RG-06)
         */
        "delay": number;
        /**
          * Define if message is hidden
         */
        "hide": boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier": string;
        /**
          * Message variant
         */
        "variant": string;
    }
    interface MgPagination {
        /**
          * Component current page
         */
        "currentPage": number;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Panignation label. Is a short description. Customize default value can be usefull to improve accessibility
         */
        "label": string;
        /**
          * Component total pages
         */
        "totalPages": number;
    }
    interface MgPopover {
        /**
          * Define if popover has a cross button
         */
        "closeButton": boolean;
        /**
          * Disable popover
         */
        "disabled": boolean;
        /**
          * Display popover
         */
        "display": boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `arai-decribedby`.
         */
        "identifier": string;
        /**
          * Popover placement
         */
        "placement": | 'auto'
    | 'auto-start'
    | 'auto-end'
    | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
    }
    interface MgTabs {
        /**
          * Active tab number default: first is 1
         */
        "activeTab": number;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Tabs items Required
         */
        "items": string[] | TabItem[];
        /**
          * Tabs label. Include short tabs description. Required for accessibility
         */
        "label": string;
    }
    interface MgTag {
        /**
          * Define if button is using outline style
         */
        "outline"?: boolean;
        /**
          * Define button variant
         */
        "variant"?: string;
    }
    interface MgTooltip {
        /**
          * Disable tooltip
         */
        "disabled": boolean;
        /**
          * Display tooltip
         */
        "display": boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `arai-decribedby`.
         */
        "identifier": string;
        /**
          * Displayed message in the tooltip
         */
        "message": string;
        /**
          * Tooltip placement
         */
        "placement": | 'auto'
    | 'auto-start'
    | 'auto-end'
    | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
    }
}
declare global {
    interface HTMLMgBadgeElement extends Components.MgBadge, HTMLStencilElement {
    }
    var HTMLMgBadgeElement: {
        prototype: HTMLMgBadgeElement;
        new (): HTMLMgBadgeElement;
    };
    interface HTMLMgButtonElement extends Components.MgButton, HTMLStencilElement {
    }
    var HTMLMgButtonElement: {
        prototype: HTMLMgButtonElement;
        new (): HTMLMgButtonElement;
    };
    interface HTMLMgCharacterLeftElement extends Components.MgCharacterLeft, HTMLStencilElement {
    }
    var HTMLMgCharacterLeftElement: {
        prototype: HTMLMgCharacterLeftElement;
        new (): HTMLMgCharacterLeftElement;
    };
    interface HTMLMgIconElement extends Components.MgIcon, HTMLStencilElement {
    }
    var HTMLMgIconElement: {
        prototype: HTMLMgIconElement;
        new (): HTMLMgIconElement;
    };
    interface HTMLMgInputCheckboxElement extends Components.MgInputCheckbox, HTMLStencilElement {
    }
    var HTMLMgInputCheckboxElement: {
        prototype: HTMLMgInputCheckboxElement;
        new (): HTMLMgInputCheckboxElement;
    };
    interface HTMLMgInputDateElement extends Components.MgInputDate, HTMLStencilElement {
    }
    var HTMLMgInputDateElement: {
        prototype: HTMLMgInputDateElement;
        new (): HTMLMgInputDateElement;
    };
    interface HTMLMgInputNumericElement extends Components.MgInputNumeric, HTMLStencilElement {
    }
    var HTMLMgInputNumericElement: {
        prototype: HTMLMgInputNumericElement;
        new (): HTMLMgInputNumericElement;
    };
    interface HTMLMgInputPasswordElement extends Components.MgInputPassword, HTMLStencilElement {
    }
    var HTMLMgInputPasswordElement: {
        prototype: HTMLMgInputPasswordElement;
        new (): HTMLMgInputPasswordElement;
    };
    interface HTMLMgInputRadioElement extends Components.MgInputRadio, HTMLStencilElement {
    }
    var HTMLMgInputRadioElement: {
        prototype: HTMLMgInputRadioElement;
        new (): HTMLMgInputRadioElement;
    };
    interface HTMLMgInputSelectElement extends Components.MgInputSelect, HTMLStencilElement {
    }
    var HTMLMgInputSelectElement: {
        prototype: HTMLMgInputSelectElement;
        new (): HTMLMgInputSelectElement;
    };
    interface HTMLMgInputTextElement extends Components.MgInputText, HTMLStencilElement {
    }
    var HTMLMgInputTextElement: {
        prototype: HTMLMgInputTextElement;
        new (): HTMLMgInputTextElement;
    };
    interface HTMLMgInputTextareaElement extends Components.MgInputTextarea, HTMLStencilElement {
    }
    var HTMLMgInputTextareaElement: {
        prototype: HTMLMgInputTextareaElement;
        new (): HTMLMgInputTextareaElement;
    };
    interface HTMLMgInputTitleElement extends Components.MgInputTitle, HTMLStencilElement {
    }
    var HTMLMgInputTitleElement: {
        prototype: HTMLMgInputTitleElement;
        new (): HTMLMgInputTitleElement;
    };
    interface HTMLMgInputToggleElement extends Components.MgInputToggle, HTMLStencilElement {
    }
    var HTMLMgInputToggleElement: {
        prototype: HTMLMgInputToggleElement;
        new (): HTMLMgInputToggleElement;
    };
    interface HTMLMgMessageElement extends Components.MgMessage, HTMLStencilElement {
    }
    var HTMLMgMessageElement: {
        prototype: HTMLMgMessageElement;
        new (): HTMLMgMessageElement;
    };
    interface HTMLMgPaginationElement extends Components.MgPagination, HTMLStencilElement {
    }
    var HTMLMgPaginationElement: {
        prototype: HTMLMgPaginationElement;
        new (): HTMLMgPaginationElement;
    };
    interface HTMLMgPopoverElement extends Components.MgPopover, HTMLStencilElement {
    }
    var HTMLMgPopoverElement: {
        prototype: HTMLMgPopoverElement;
        new (): HTMLMgPopoverElement;
    };
    interface HTMLMgTabsElement extends Components.MgTabs, HTMLStencilElement {
    }
    var HTMLMgTabsElement: {
        prototype: HTMLMgTabsElement;
        new (): HTMLMgTabsElement;
    };
    interface HTMLMgTagElement extends Components.MgTag, HTMLStencilElement {
    }
    var HTMLMgTagElement: {
        prototype: HTMLMgTagElement;
        new (): HTMLMgTagElement;
    };
    interface HTMLMgTooltipElement extends Components.MgTooltip, HTMLStencilElement {
    }
    var HTMLMgTooltipElement: {
        prototype: HTMLMgTooltipElement;
        new (): HTMLMgTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "mg-badge": HTMLMgBadgeElement;
        "mg-button": HTMLMgButtonElement;
        "mg-character-left": HTMLMgCharacterLeftElement;
        "mg-icon": HTMLMgIconElement;
        "mg-input-checkbox": HTMLMgInputCheckboxElement;
        "mg-input-date": HTMLMgInputDateElement;
        "mg-input-numeric": HTMLMgInputNumericElement;
        "mg-input-password": HTMLMgInputPasswordElement;
        "mg-input-radio": HTMLMgInputRadioElement;
        "mg-input-select": HTMLMgInputSelectElement;
        "mg-input-text": HTMLMgInputTextElement;
        "mg-input-textarea": HTMLMgInputTextareaElement;
        "mg-input-title": HTMLMgInputTitleElement;
        "mg-input-toggle": HTMLMgInputToggleElement;
        "mg-message": HTMLMgMessageElement;
        "mg-pagination": HTMLMgPaginationElement;
        "mg-popover": HTMLMgPopoverElement;
        "mg-tabs": HTMLMgTabsElement;
        "mg-tag": HTMLMgTagElement;
        "mg-tooltip": HTMLMgTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MgBadge {
        /**
          * Badge label. Include short description. Required for accessibility
         */
        "label": BadgeType['label'];
        /**
          * Define if button is using outline style
         */
        "outline"?: boolean;
        /**
          * Badge value
         */
        "value": BadgeType['value'];
        /**
          * Define button variant
         */
        "variant"?: string;
    }
    interface MgButton {
        /**
          * Option to set input disable on click, in order to prevent multi-click. Parent component have to remove the attribute 'disabled' when the process ends.
         */
        "disableOnClick"?: boolean;
        /**
          * Disable button
         */
        "disabled"?: boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if button is round. Used for icon button.
         */
        "isIcon"?: boolean;
        /**
          * aria-label In case button text is not explicit enough
         */
        "label"?: string;
        /**
          * Define button variant
         */
        "variant"?: string;
    }
    interface MgCharacterLeft {
        /**
          * Sets the characters to count
         */
        "characters"?: string;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `arai-decribedby`.
         */
        "identifier"?: string;
        /**
          * Add maximum length
         */
        "maxlength": number;
        /**
          * Template to display remaining characters. Must have {counter} inside
         */
        "template"?: string;
    }
    interface MgIcon {
        /**
          * Icon to display
         */
        "icon"?: string;
        /**
          * Define icon size
         */
        "size"?: string;
        /**
          * Make the icon spin
         */
        "spin"?: boolean;
        /**
          * Define icon variant Add a background to the icon based on variant color
         */
        "variant"?: string;
    }
    interface MgInputCheckbox {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList"?: boolean;
        /**
          * Force invalid component
         */
        "invalid"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emitted event when value change
         */
        "onValue-change"?: (event: CustomEvent<CheckboxValue[]>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Force valid component
         */
        "valid"?: boolean;
        /**
          * Component value If item.value is `null`, checkbox will be indeterminate by default Required
         */
        "value": CheckboxValue[];
    }
    interface MgInputDate {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Define input maximum date format: yyyy-mm-dd
         */
        "max"?: string;
        /**
          * Define input minimum date format: yyyy-mm-dd
         */
        "min"?: string;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<string>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define input pattern to validate
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputNumeric {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Maximum value
         */
        "max"?: number;
        /**
          * Minimum value
         */
        "min"?: number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<number>) => void;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define numeric type
         */
        "type"?: string;
        /**
          * Define input pattern to validate
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputPassword {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<string>) => void;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define input pattern to validate
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputRadio {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if inputs are display verticaly
         */
        "inputVerticalList"?: boolean;
        /**
          * Force invalid component
         */
        "invalid"?: boolean;
        /**
          * Items are the possible options to select Required
         */
        "items": string[] | RadioOption[];
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emitted event when value change
         */
        "onValue-change"?: (event: CustomEvent<any>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Force valid component
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgInputSelect {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input invalid state
         */
        "invalid"?: boolean;
        /**
          * Items are the possible options to select
         */
        "items": string[] | SelectOption[];
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<string>) => void;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Option to disable placeholder
         */
        "placeholderDisabled"?: boolean;
        /**
          * Option to remove placeholder
         */
        "placeholderHide"?: boolean;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define input valid state
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputText {
        /**
          * Template to use for characters left sentence
         */
        "characterLeftTemplate"?: string;
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Define if component should display character left
         */
        "displayCharacterLeft"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Input icon
         */
        "icon"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength"?: number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<string>) => void;
        /**
          * Define input pattern to validate
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Input type
         */
        "type"?: 'text' | 'search';
        /**
          * Define input pattern to validate
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputTextarea {
        /**
          * Template to use for characters left sentence
         */
        "characterLeftTemplate"?: string;
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Define if component should display character left
         */
        "displayCharacterLeft"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define input pattern error message
         */
        "invalid"?: boolean;
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input max length
         */
        "maxlength"?: number;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<string>) => void;
        /**
          * Define input pattern to validate
         */
        "pattern"?: string;
        /**
          * Define input pattern error message
         */
        "patternErrorMessage"?: string;
        /**
          * Input placeholder. It should be a word or short phrase that demonstrates the expected type of data, not a replacement for labels or help text.
         */
        "placeholder"?: string;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Define if input is required
         */
        "required"?: boolean;
        /**
          * Define input pattern error message
         */
        "rows"?: number;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Define input pattern to validate
         */
        "valid"?: boolean;
        /**
          * Component value
         */
        "value"?: string;
    }
    interface MgInputTitle {
        /**
          * Label input id
         */
        "identifier": string;
        /**
          * Switch from label to fieldset sementic
         */
        "isLegend"?: boolean;
        /**
          * If input is required an asterisk is added at the end of the label
         */
        "required"?: boolean;
    }
    interface MgInputToggle {
        /**
          * Define if input is disabled
         */
        "disabled"?: boolean;
        /**
          * Add a help text under the input, usually expected data format and example
         */
        "helpText"?: string;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Define if toggle display icon
         */
        "isIcon"?: boolean;
        /**
          * Define if toggle have on/off style
         */
        "isOnOff"?: boolean;
        /**
          * Items are the possible options to select Required
         */
        "items": string[] | ToggleValue[];
        /**
          * Input label Required
         */
        "label": string;
        /**
          * Define if label is visible
         */
        "labelHide"?: boolean;
        /**
          * Define if label is displayed on top
         */
        "labelOnTop"?: boolean;
        /**
          * Input name If not set the value equals the identifier
         */
        "name"?: string;
        /**
          * Emmited event when value change
         */
        "onValue-change"?: (event: CustomEvent<any>) => void;
        /**
          * Define if input is readonly
         */
        "readonly"?: boolean;
        /**
          * Add a tooltip message next to the input
         */
        "tooltip"?: string;
        /**
          * Component value
         */
        "value"?: any;
    }
    interface MgMessage {
        /**
          * Define if message has a cross button RG 01: https://jira.mgdis.fr/browse/PDA9-140
         */
        "closeButton"?: boolean;
        /**
          * Add a delay to hide/close message when it passed Value is defined in seconds and must greater than 2 seconds (PDA9-314 RG-06)
         */
        "delay"?: number;
        /**
          * Define if message is hidden
         */
        "hide"?: boolean;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Emmited event when message is hidden
         */
        "onComponent-hide"?: (event: CustomEvent<string>) => void;
        /**
          * Emmited event when message is diplayed
         */
        "onComponent-show"?: (event: CustomEvent<string>) => void;
        /**
          * Message variant
         */
        "variant"?: string;
    }
    interface MgPagination {
        /**
          * Component current page
         */
        "currentPage"?: number;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Panignation label. Is a short description. Customize default value can be usefull to improve accessibility
         */
        "label"?: string;
        /**
          * Emmited event when current page change
         */
        "onCurrent-page-change"?: (event: CustomEvent<number>) => void;
        /**
          * Component total pages
         */
        "totalPages"?: number;
    }
    interface MgPopover {
        /**
          * Define if popover has a cross button
         */
        "closeButton"?: boolean;
        /**
          * Disable popover
         */
        "disabled"?: boolean;
        /**
          * Display popover
         */
        "display"?: boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `arai-decribedby`.
         */
        "identifier"?: string;
        /**
          * Popover placement
         */
        "placement"?: | 'auto'
    | 'auto-start'
    | 'auto-end'
    | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
    }
    interface MgTabs {
        /**
          * Active tab number default: first is 1
         */
        "activeTab"?: number;
        /**
          * Identifier is used for the element ID (id is a reserved prop in Stencil.js) If not set, it will be created.
         */
        "identifier"?: string;
        /**
          * Tabs items Required
         */
        "items": string[] | TabItem[];
        /**
          * Tabs label. Include short tabs description. Required for accessibility
         */
        "label": string;
    }
    interface MgTag {
        /**
          * Define if button is using outline style
         */
        "outline"?: boolean;
        /**
          * Define button variant
         */
        "variant"?: string;
    }
    interface MgTooltip {
        /**
          * Disable tooltip
         */
        "disabled"?: boolean;
        /**
          * Display tooltip
         */
        "display"?: boolean;
        /**
          * Sets an `id` attribute. Needed by the input for accessibility `arai-decribedby`.
         */
        "identifier"?: string;
        /**
          * Displayed message in the tooltip
         */
        "message": string;
        /**
          * Tooltip placement
         */
        "placement"?: | 'auto'
    | 'auto-start'
    | 'auto-end'
    | 'top'
    | 'top-start'
    | 'top-end'
    | 'bottom'
    | 'bottom-start'
    | 'bottom-end'
    | 'right'
    | 'right-start'
    | 'right-end'
    | 'left'
    | 'left-start'
    | 'left-end';
    }
    interface IntrinsicElements {
        "mg-badge": MgBadge;
        "mg-button": MgButton;
        "mg-character-left": MgCharacterLeft;
        "mg-icon": MgIcon;
        "mg-input-checkbox": MgInputCheckbox;
        "mg-input-date": MgInputDate;
        "mg-input-numeric": MgInputNumeric;
        "mg-input-password": MgInputPassword;
        "mg-input-radio": MgInputRadio;
        "mg-input-select": MgInputSelect;
        "mg-input-text": MgInputText;
        "mg-input-textarea": MgInputTextarea;
        "mg-input-title": MgInputTitle;
        "mg-input-toggle": MgInputToggle;
        "mg-message": MgMessage;
        "mg-pagination": MgPagination;
        "mg-popover": MgPopover;
        "mg-tabs": MgTabs;
        "mg-tag": MgTag;
        "mg-tooltip": MgTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mg-badge": LocalJSX.MgBadge & JSXBase.HTMLAttributes<HTMLMgBadgeElement>;
            "mg-button": LocalJSX.MgButton & JSXBase.HTMLAttributes<HTMLMgButtonElement>;
            "mg-character-left": LocalJSX.MgCharacterLeft & JSXBase.HTMLAttributes<HTMLMgCharacterLeftElement>;
            "mg-icon": LocalJSX.MgIcon & JSXBase.HTMLAttributes<HTMLMgIconElement>;
            "mg-input-checkbox": LocalJSX.MgInputCheckbox & JSXBase.HTMLAttributes<HTMLMgInputCheckboxElement>;
            "mg-input-date": LocalJSX.MgInputDate & JSXBase.HTMLAttributes<HTMLMgInputDateElement>;
            "mg-input-numeric": LocalJSX.MgInputNumeric & JSXBase.HTMLAttributes<HTMLMgInputNumericElement>;
            "mg-input-password": LocalJSX.MgInputPassword & JSXBase.HTMLAttributes<HTMLMgInputPasswordElement>;
            "mg-input-radio": LocalJSX.MgInputRadio & JSXBase.HTMLAttributes<HTMLMgInputRadioElement>;
            "mg-input-select": LocalJSX.MgInputSelect & JSXBase.HTMLAttributes<HTMLMgInputSelectElement>;
            "mg-input-text": LocalJSX.MgInputText & JSXBase.HTMLAttributes<HTMLMgInputTextElement>;
            "mg-input-textarea": LocalJSX.MgInputTextarea & JSXBase.HTMLAttributes<HTMLMgInputTextareaElement>;
            "mg-input-title": LocalJSX.MgInputTitle & JSXBase.HTMLAttributes<HTMLMgInputTitleElement>;
            "mg-input-toggle": LocalJSX.MgInputToggle & JSXBase.HTMLAttributes<HTMLMgInputToggleElement>;
            "mg-message": LocalJSX.MgMessage & JSXBase.HTMLAttributes<HTMLMgMessageElement>;
            "mg-pagination": LocalJSX.MgPagination & JSXBase.HTMLAttributes<HTMLMgPaginationElement>;
            "mg-popover": LocalJSX.MgPopover & JSXBase.HTMLAttributes<HTMLMgPopoverElement>;
            "mg-tabs": LocalJSX.MgTabs & JSXBase.HTMLAttributes<HTMLMgTabsElement>;
            "mg-tag": LocalJSX.MgTag & JSXBase.HTMLAttributes<HTMLMgTagElement>;
            "mg-tooltip": LocalJSX.MgTooltip & JSXBase.HTMLAttributes<HTMLMgTooltipElement>;
        }
    }
}
